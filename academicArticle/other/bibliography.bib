@book{Cox-Buday2017,
	author = {Cox-Buday, Katherine},
	title = {Concurrency in Go},
	publisher = {O'Reilly},
	address = {Sebastopol, California},
	month = {August},
	year = {2017}
}

@MISC{Edge2016,
	author = {Jack Edge},
	title = {The perils of federated protocols},
	month = {May},
	year = {2016},
	howpublished = {\url{https://lwn.net/Articles/687294/}}
}

@MISC{Kaufman2016,
	author = {Brett Max Kaufman},
	title = {New documents reveal government effort to impose secrecy on encryption company},
	month = {October},
	year = {2016},
	howpublished = {\url{https://www.aclu.org/blog/national-security/secrecy/new-documents-reveal-government-effort-impose-secrecy-encryption}}
}

@book{GoPL2015,
	author = {Alan A.A. Donovan and Brian W. Kernighan},
	title = {The Go Programming Language},
	publisher = {Addison-Wesley},
	month = {October},
	year = {2015}
}

@MISC{GoNet,
	title = {Go's standard library's net package. {Listener type}},
	year = {go1.17.8},
	howpublished = {\url{https://pkg.go.dev/net#Listener}}
}

@MISC{GoHTTP,
	title = {Go's standard library's net/http package. {Serve() function}},
	year = {go1.17.8},
	howpublished = {\url{https://pkg.go.dev/net/http#Serve}}
}

@MISC{Hodgson2020,
	author = {Matthew Hodgson},
	title = {On privacy versus freedom},
	month = {January},
	year = {2020},
	howpublished = {\url{https://matrix.org/blog/2020/01/02/on-privacy-versus-freedom}}
}

@MISC{Kennedy2018,
	author = {William Kennedy},
	title = {Scheduling in {Go}: {OS} Scheduler},
	month = {August},
	year = {2018},
	howpublished = {\url{https://www.ardanlabs.com/blog/2018/08/scheduling-in-go-part1.html}}
}

@book{Kerrisk2010,
	author = {Kerrisk, Michael},
	title = {The Linux Programming Interface},
	publisher = {No Starch Press},
	address = {San Francisco},
	year = {2010}
}

@MISC{Kerrisk2021,
	author = {Kerrisk, Michael},
	title = {Docker unplugged},
	howpublished = {Training material},
	year = {2021},
	month = {October}
}

@article{Mirkovic2004,
	author = {Mirkovic, Jelena and Reiher, Peter},
	title = {A Taxonomy of {DDoS} Attack and {DDoS} Defense Mechanisms},
	year = {2004},
	issue_date = {April 2004},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	volume = {34},
	number = {2},
	issn = {0146-4833},
	url = {https://doi.org/10.1145/997150.997156},
	doi = {10.1145/997150.997156},
	journal = {SIGCOMM Comput. Commun. Rev.},
	month = {Apr.},
	pages = {39–53},
	numpages = {15}
}

@book{Kleppmann2017,
	author = {Kleppmann, Martin},
	title = {Designing Data-Intensive Applications},
	publisher = {O'Reilly},
	address = {Sebastopol, California},
	year = {2017},
	month = {March}
}

@MISC{Kumar2021,
	author = {Rohan Kumar},
	title = {{WhatsApp} and the domestication of users},
	month = {January},
	year = {2021},
	howpublished = {\url{https://seirdy.one/2021/01/27/whatsapp-and-the-domestication-of-users.html}}
}

@MISC{Morsing2013,
	author = {Daniel Morsing},
	title = {The {Go} scheduler},
	month = {June},
	year = {2013},
	howpublished = {\url{https://morsmachine.dk/go-scheduler}}
}

@MISC{Graham,
	author = {Robert David Graham},
	title = {{MASSCAN}: {Mass} {IP} port scanner},
	howpublished = {\url{https://github.com/robertdavidgraham/masscan}}
}

@MISC{Morsing2013_2,
	author = {Daniel Morsing},
	title = {The {Go} netpoller},
	month = {September},
	year = {2013},
	howpublished = {\url{https://morsmachine.dk/netpoller}}
}


@MISC{Siebenmann2019,
	author = {Chris Siebenmann},
	title = {The {Go}  runtime scheduler's clever way of dealing with system calls},
	month = {December},
	year = {2019},
	howpublished = {\url{https://utcc.utoronto.ca/~cks/space/blog/programming/GoSchedulerAndSyscalls}}
}

@inproceedings{Pike2012,
	author = {Pike, Rob},
	title = {Go at {Google}},
	year = {2012},
	isbn = {9781450315630},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/2384716.2384720},
	doi = {10.1145/2384716.2384720},
	abstract = {The Go programming language was conceived in late 2007 as an answer to some of the problems we were seeing developing software infrastructure at Google. The computing landscape today is almost unrelated to the environment in which the languages being used, mostly C++, Java, and Python, had been created. The problems introduced by multicore processors, networked systems, massive computation clusters, and the web programming model were being worked around rather than addressed head-on. Moreover, the scale has changed: today's server programs comprise tens of millions of lines of code, are worked on by hundreds or even thousands of programmers, and are updated literally every day. To make matters worse, build times, even on large compilation clusters, have stretched to many minutes, even hours.Go was designed and developed to make working in this environment more productive. Besides its better-known aspects such as built-in concurrency and garbage collection, Go's design considerations include rigorous dependency management, the adaptability of software architecture as systems grow, and robustness across the boundaries between components.This talk will explain how these issues were addressed while building an efficient, compiled programming language that feels lightweight and pleasant. Examples and explanations will be taken from the real-world problems faced at Google.},
	booktitle = {Proceedings of the 3rd Annual Conference on Systems, Programming, and Applications: Software for Humanity},
	pages = {5–6},
	numpages = {2},
	keywords = {programming in the large, composition, go, concurrency},
	location = {Tucson, Arizona, USA},
	series = {SPLASH '12}
}

@MISC{Rodriguez2022,
	author = {Eduardo {Rodriguez Fernandez}},
	title = {{papayaChat}: a self-hosted {CLI} chat service for the cloud written in {C}},
	year = {2022},
	howpublished = {\url{https://github.com/erodrigufer/papayaChat}}
}

@book{Seacord2020,
	author = {Seacord, Robert C.},
	title = {Effective C: an introduction to professional C programming},
	publisher = {No Starch Press},
	address = {San Francisco},
	year = {2020}
}

@inproceedings{Ajmani2016,
	author = {Ajmani, Sameer},
	title = {Program {Your} next {Server} in {Go}},
	year = {2016},
	isbn = {9781450344647},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/2959689.2960078},
	doi = {10.1145/2959689.2960078},
	abstract = {Go is a new general-purpose programming language for professionals who build and maintain production systems. Hundreds of companies and thousands of open-source projects are using Go, including Google, DropBox, Docker, Apcera, and SoundCloud. This talk will present Go to the experienced service developer and show how its radically simple approach to software construction can make teams more productive.},
	booktitle = {Applicative 2016},
	location = {New York, NY, USA},
	series = {Applicative 2016}
}

@article{2012PoulHenning,
	author = {Kamp, Poul-Henning},
	title = {A {Generation Lost in the Bazaar}: {Quality} happens only when someone is responsible for it.},
	year = {2012},
	issue_date = {August 2012},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	volume = {10},
	number = {8},
	issn = {1542-7730},
	url = {https://doi.org/10.1145/2346916.2349257},
	doi = {10.1145/2346916.2349257},
	abstract = {Thirteen years ago, Eric Raymond’s book "The Cathedral and the Bazaar" (O’Reilly Media, 2001) redefined our vocabulary and all but promised an end to the waterfall model and big software companies, thanks to the new grass-roots open source software development movement. I found the book thought provoking, but it did not convince me. On the other hand, being deeply involved in open source, I couldn’t help but think that it would be nice if he was right.},
	journal = {ACM Queue},
	month = {aug},
	pages = {20–23},
	numpages = {4}
}

@article{GoArticleACM,
	author = {Cox, Russ and Griesemer, Robert and Pike, Rob and Taylor, Ian Lance and Thompson, Ken},
	title = {The {Go} Programming Language and Environment},
	year = {2022},
	issue_date = {May 2022},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	volume = {65},
	number = {5},
	issn = {0001-0782},
	url = {https://doi.org/10.1145/3488716},
	doi = {10.1145/3488716},
	abstract = {Released as open source in November 2009, Go has become the foundation for critical infrastructure at every major cloud provider. Its creators look back on how Go got here and why it has stuck around.},
	journal = {Commun. ACM},
	month = {apr},
	pages = {70–78},
	numpages = {9}
}