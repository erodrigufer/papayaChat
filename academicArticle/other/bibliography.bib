@book{Cox-Buday2017,
	author = {Cox-Buday, Katherine},
	title = {Concurrency in Go},
	publisher = {O'Reilly},
	address = {Sebastopol, California},
	month = {August},
	year = {2017}
}

@online{Edge2016,
	author = {Jack Edge},
	title = {The perils of federated protocols},
	month = {May},
	year = {2016},
	url = {https://lwn.net/Articles/687294/},
	note = {visited on 2022-06-27},
}

@online{Kaufman2016,
	author = {Brett Max Kaufman},
	title = {New documents reveal government effort to impose secrecy on encryption company},
	month = {October},
	year = {2016},
	url = {https://www.aclu.org/blog/national-security/secrecy/new-documents-reveal-government-effort-impose-secrecy-encryption},
	note = {visited on 2022-06-27},
}

@book{GoPL2015,
	author = {Alan A.A. Donovan and Brian W. Kernighan},
	title = {The Go Programming Language},
	publisher = {Addison-Wesley},
	month = {October},
	year = {2015}
}

@online{GoNet,
	title = {Go's standard library's net package. {Listener type}},
	year = {go1.18.3},
	url = {https://pkg.go.dev/net#Listener},
	note = {visited on 2022-06-27},
}

@online{Hodgson2020,
	author = {Matthew Hodgson},
	title = {On privacy versus freedom},
	url = {https://matrix.org/blog/2020/01/02/on-privacy-versus-freedom},
	note = {visited on 2022-06-27},
}

@online{Kennedy2018,
	author = {William Kennedy},
	title = {Scheduling in {Go}: {OS} Scheduler},
	month = {August},
	year = {2018},
	url = {https://www.ardanlabs.com/blog/2018/08/scheduling-in-go-part1.html},
	note = {visited on 2022-06-27},
}

@book{Kerrisk2010,
	author = {Kerrisk, Michael},
	title = {The Linux Programming Interface},
	publisher = {No Starch Press},
	address = {San Francisco},
	year = {2010}
}

@book{Kleppmann2017,
	author = {Kleppmann, Martin},
	title = {Designing Data-Intensive Applications},
	publisher = {O'Reilly},
	address = {Sebastopol, California},
	year = {2017},
	month = {March}
}

@online{Kumar2021,
	author = {Rohan Kumar},
	title = {{WhatsApp} and the domestication of users},
	month = {January},
	year = {2021},
	url = {https://seirdy.one/2021/01/27/whatsapp-and-the-domestication-of-users.html},
	note = {visited on 2022-06-27},
}

@online{Morsing2013,
	author = {Daniel Morsing},
	title = {The {Go} scheduler},
	month = {June},
	year = {2013},
	url = {https://morsmachine.dk/go-scheduler},
	note = {visited on 2022-06-27},
}

@online{Morsing2013_2,
	author = {Daniel Morsing},
	title = {The {Go} netpoller},
	month = {September},
	year = {2013},
	url = {https://morsmachine.dk/netpoller},
	note = {visited on 2022-06-27},
}


@online{Siebenmann2019,
	author = {Chris Siebenmann},
	title = {The {Go}  runtime scheduler's clever way of dealing with system calls},
	month = {December},
	year = {2019},
	url = {https://utcc.utoronto.ca/~cks/space/blog/programming/GoSchedulerAndSyscalls},
	note = {visited on 2022-06-27},
}

@inproceedings{Pike2012,
	author = {Pike, Rob},
	title = {Go at {Google}},
	year = {2012},
	isbn = {9781450315630},
	publisher = {ACM},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/2384716.2384720},
	doi = {10.1145/2384716.2384720},
	abstract = {The Go programming language was conceived in late 2007 as an answer to some of the problems we were seeing developing software infrastructure at Google. The computing landscape today is almost unrelated to the environment in which the languages being used, mostly C++, Java, and Python, had been created. The problems introduced by multicore processors, networked systems, massive computation clusters, and the web programming model were being worked around rather than addressed head-on. Moreover, the scale has changed: today's server programs comprise tens of millions of lines of code, are worked on by hundreds or even thousands of programmers, and are updated literally every day. To make matters worse, build times, even on large compilation clusters, have stretched to many minutes, even hours.Go was designed and developed to make working in this environment more productive. Besides its better-known aspects such as built-in concurrency and garbage collection, Go's design considerations include rigorous dependency management, the adaptability of software architecture as systems grow, and robustness across the boundaries between components.This talk will explain how these issues were addressed while building an efficient, compiled programming language that feels lightweight and pleasant. Examples and explanations will be taken from the real-world problems faced at Google.},
	booktitle = {Proceedings of the 3rd Annual Conference on Systems, Programming, and Applications: Software for Humanity},
	pages = {5–6},
	numpages = {2},
	keywords = {programming in the large, composition, go, concurrency},
	location = {Tucson, Arizona, USA},
	series = {SPLASH '12}
}

@online{Rodriguez2022,
	author = {Eduardo {Rodriguez Fernandez}},
	title = {{papayaChat}: a self-hosted {CLI} chat service for the cloud written in {C}},
	year = {2022},
	url = {https://github.com/erodrigufer/papayaChat},
	note = {visited on 2022-06-27},
}

@inproceedings{Ajmani2016,
	author = {Ajmani, Sameer},
	title = {Program your next server in {Go}},
	year = {2016},
	isbn = {9781450344647},
	publisher = {ACM},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/2959689.2960078},
	doi = {10.1145/2959689.2960078},
	abstract = {Go is a new general-purpose programming language for professionals who build and maintain production systems. Hundreds of companies and thousands of open-source projects are using Go, including Google, DropBox, Docker, Apcera, and SoundCloud. This talk will present Go to the experienced service developer and show how its radically simple approach to software construction can make teams more productive.},
	booktitle = {Applicative 2016},
	location = {New York, NY, USA},
	series = {Applicative 2016}
}

@article{2012PoulHenning,
	author = {Kamp, Poul-Henning},
	title = {A {Generation Lost in the Bazaar}: {Quality} happens only when someone is responsible for it.},
	year = {2012},
	issue_date = {August 2012},
	publisher = {ACM},
	address = {New York, NY, USA},
	volume = {10},
	number = {8},
	issn = {1542-7730},
	url = {https://doi.org/10.1145/2346916.2349257},
	doi = {10.1145/2346916.2349257},
	abstract = {Thirteen years ago, Eric Raymond’s book "The Cathedral and the Bazaar" (O’Reilly Media, 2001) redefined our vocabulary and all but promised an end to the waterfall model and big software companies, thanks to the new grass-roots open source software development movement. I found the book thought provoking, but it did not convince me. On the other hand, being deeply involved in open source, I couldn’t help but think that it would be nice if he was right.},
	journal = {ACM Queue},
	month = {August},
	pages = {20–23},
	numpages = {4}
}

@article{GoArticleACM,
	author = {Cox, Russ and Griesemer, Robert and Pike, Rob and Taylor, Ian Lance and Thompson, Ken},
	title = {The {Go} Programming Language and Environment},
	year = {2022},
	issue_date = {May 2022},
	publisher = {ACM},
	address = {New York, NY, USA},
	volume = {65},
	number = {5},
	issn = {0001-0782},
	url = {https://doi.org/10.1145/3488716},
	doi = {10.1145/3488716},
	abstract = {Released as open source in November 2009, Go has become the foundation for critical infrastructure at every major cloud provider. Its creators look back on how Go got here and why it has stuck around.},
	journal = {Communications of the ACM},
	month = {April},
	pages = {70–78},
	numpages = {9}
}

@inproceedings{socialmedia2017,
	author = {Choudhery, Deepankar and Leung, Carson K.},
	title = {Social Media Mining: Prediction of Box Office Revenue},
	year = {2017},
	isbn = {9781450352208},
	publisher = {ACM},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/3105831.3105854},
	doi = {10.1145/3105831.3105854},
	abstract = {In recent years, social media has played a huge role in how we share and communicate our thoughts and opinions. This information can very valuable for companies and governments as it can be used to analyze public mood and opinion which is a very powerful tool. In this paper, we present a system that mines social media content from a platform such as Twitter for predicting future outcomes. Specifically, it uses chatter from Twitter to predict box office revenue of movies by extracting features such as tweets and their sentiments. Then, by using these features, our system constructs a polynomial regression model for predicting box office revenue. Experimental results show the effectiveness of our system in mining social media and predicting box office revenue.},
	booktitle = {Proceedings of the 21st International Database Engineering; Applications Symposium},
	pages = {20–29},
	numpages = {10},
	keywords = {social media data, Twitter, tweets, Data mining, prediction, social networking sites, box office, movies},
	location = {Bristol, United Kingdom},
	series = {IDEAS 2017}
}

@article{2013ContextSwitching,
	author = {Dolan, Stephen and Muralidharan, Servesh and Gregg, David},
	title = {Compiler Support for Lightweight Context Switching},
	year = {2013},
	issue_date = {January 2013},
	publisher = {ACM},
	address = {New York, NY, USA},
	volume = {9},
	number = {4},
	issn = {1544-3566},
	url = {https://doi.org/10.1145/2400682.2400695},
	doi = {10.1145/2400682.2400695},
	abstract = {We propose a new language-neutral primitive for the LLVM compiler, which provides efficient context switching and message passing between lightweight threads of control. The primitive, called Swapstack, can be used by any language implementation based on LLVM to build higher-level language structures such as continuations, coroutines, and lightweight threads. As part of adding the primitives to LLVM, we have also added compiler support for passing parameters across context switches. Our modified LLVM compiler produces highly efficient code through a combination of exposing the context switching code to existing compiler optimizations, and adding novel compiler optimizations to further reduce the cost of context switches. To demonstrate the generality and efficiency of our primitives, we add one-shot continuations to C++, and provide a simple fiber library that allows millions of fibers to run on multiple cores, with a work-stealing scheduler and fast inter-fiber sychronization. We argue that compiler-supported lightweight context switching can be significantly faster than using a library to switch between contexts, and provide experimental evidence to support the position.},
	journal = {ACM Transactions in Architecture and Code Optimization},
	month = {January},
	articleno = {36},
	numpages = {25},
	keywords = {Compiler, fiber, synchronization, continuation}
}

@article{2005Threads,
	author = {Gustafsson, Andreas},
	title = {Threads without the Pain: Multithreaded Programming Need Not Be so Angst-Ridden.},
	year = {2005},
	issue_date = {November 2005},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	volume = {3},
	number = {9},
	issn = {1542-7730},
	url = {https://doi.org/10.1145/1105664.1105678},
	doi = {10.1145/1105664.1105678},
	abstract = {Much of today’s software deals with multiple concurrent tasks. Web browsers support multiple concurrent HTTP connections, graphical user interfaces deal with multiple windows and input devices, and Web and DNS servers handle concurrent connections or transactions from large numbers of clients. The number of concurrent tasks that needs to be handled increases while software grows more complex. Structuring concurrent software in a way that meets the increasing scalability requirements while remaining simple, structured, and safe enough to allow mortal programmers to construct ever-more complex systems is a major engineering challenge.},
	journal = {ACM Queue},
	month = {November},
	pages = {34–41},
	numpages = {8}
}

@inproceedings{2003Events,
	author = {von Behren, Rob and Condit, Jeremy and Brewer, Eric},
	title = {Why Events Are a Bad Idea (for High-Concurrency Servers)},
	year = {2003},
	publisher = {USENIX Association},
	address = {USA},
	abstract = {Event-based programming has been highly touted in recent years as the best way to write highly concurrent applications. Having worked on several of these systems, we now believe this approach to be a mistake. Specifically, we believe that threads can achieve all of the strengths of events, including support for high concurrency, low overhead, and a simple concurrency model. Moreover, we argue that threads allow a simpler and more natural programming style.We examine the claimed strengths of events over threads and show that the weaknesses of threads are artifacts of specific threading implementations and not inherent to the threading paradigm. As evidence, we present a user-level thread package that scales to 100,000 threads and achieves excellent performance in a web server. We also refine the duality argument of Lauer and Needham, which implies that good implementations of thread systems and event systems will have similar performance. Finally, we argue that compiler support for thread systems is a fruitful area for future research. It is a mistake to attempt high concurrency without help from the compiler, and we discuss several enhancements that are enabled by relatively simple compiler changes.},
	booktitle = {Proceedings of the 9th Conference on Hot Topics in Operating Systems - Volume 9},
	pages = {4},
	numpages = {1},
	location = {Lihue, Hawaii},
	series = {HOTOS'03}
}

@inproceedings{2022DataRacesGolang,
	author = {Chabbi, Milind and Ramanathan, Murali Krishna},
	title = {A Study of Real-World Data Races in {Golang}},
	year = {2022},
	isbn = {9781450392655},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/3519939.3523720},
	doi = {10.1145/3519939.3523720},
	abstract = {The concurrent programming literature is rich with tools and techniques for data race detection. Less, however, has been known about real-world, industry-scale deployment, experience, and insights about data races. Golang (Go for short) is a modern programming language that makes concurrency a first-class citizen. Go offers both message passing and shared memory for communicating among concurrent threads. Go is gaining popularity in modern microservice-based systems. Data races in Go stand in the face of its emerging popularity.  
	
	In this paper, using our industrial codebase as an example, we demonstrate that Go developers embrace concurrency and show how the abundance of concurrency alongside language idioms and nuances make Go programs highly susceptible to data races. Google’s Go distribution ships with a built-in dynamic data race detector based on ThreadSanitizer. However, dynamic race detectors pose scalability and flakiness challenges; we discuss various software engineering trade-offs to make this detector work effectively at scale. We have deployed this detector in Uber’s 46 million lines of Go codebase hosting 2100 distinct microservices, found over 2000 data races, and fixed over 1000 data races, spanning 790 distinct code patches submitted by 210 unique developers over a six-month period. Based on a detailed investigation of these data race patterns in Go, we make seven high-level observations relating to the complex interplay between the Go language paradigm and data races.},
	booktitle = {Proceedings of the 43rd ACM SIGPLAN International Conference on Programming Language Design and Implementation},
	pages = {474–489},
	numpages = {16},
	keywords = {Golang, Dynamic analysis, Data race},
	location = {San Diego, CA, USA},
	series = {PLDI 2022}
}